{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAiB9C,OACI,cAAC,WAAD,UACI,sBAAMC,SAVO,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBU,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,e,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCcLO,EAZK,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAI1B,OACI,sBAAKc,UAAU,0CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCyBDO,EA9BC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEDa,ECHU,SAACb,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OAXAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,CAACpB,IAEGqB,EDdkBK,CAAa1B,GAA9BO,KAQR,OACI,eAAC,WAAD,WACI,oBAAIS,UAAU,oCAAd,SAAmDhB,IAInD,qBAAKgB,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEpBxBgB,EAAe,WAAO,IAAD,EAEMzC,mBAAS,CAAC,WAFhB,mBAEvB0C,EAFuB,KAEX3C,EAFW,KAI9B,OACI,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,8BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCbjC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.fe38d0d8.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        // console.log(e.target.value);\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </form>\r\n        </Fragment>\r\n    )\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Pi7fneCKW7kSmxQxGrmK4ZtxqXXardOX`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n};","import React from 'react'\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n\r\n    // console.log(id, title, url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__flipInY\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React, { Fragment } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    const { data: images } = useFetchGifs(category);\r\n\r\n    // //Para que renderice unicamente si la categorÃ­a cambia\r\n    // useEffect(() => {\r\n    //     getGifs(category)\r\n    //         .then(imgs => setImages(imgs));\r\n    // }, [category])\r\n\r\n    return (\r\n        <Fragment>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n            {/* {loading && <p className=\"animate__animated animate__flash\">Loading...</p>} */}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n    }, [category])\r\n\r\n    return state; // { data: [], loading: true }\r\n}\r\n","import React, { Fragment, useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['Naruto']);\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>My Giphy App</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            <div>\r\n                {\r\n                    categories.map(category =>\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}